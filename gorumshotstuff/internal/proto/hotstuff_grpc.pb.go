// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HotstuffClient is the client API for Hotstuff service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HotstuffClient interface {
	Propose(ctx context.Context, opts ...grpc.CallOption) (Hotstuff_ProposeClient, error)
	NewView(ctx context.Context, in *QuorumCert, opts ...grpc.CallOption) (*Empty, error)
}

type hotstuffClient struct {
	cc *grpc.ClientConn
}

func NewHotstuffClient(cc *grpc.ClientConn) HotstuffClient {
	return &hotstuffClient{cc}
}

func (c *hotstuffClient) Propose(ctx context.Context, opts ...grpc.CallOption) (Hotstuff_ProposeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Hotstuff_serviceDesc.Streams[0], "/proto.Hotstuff/Propose", opts...)
	if err != nil {
		return nil, err
	}
	x := &hotstuffProposeClient{stream}
	return x, nil
}

type Hotstuff_ProposeClient interface {
	Send(*HSNode) error
	Recv() (*PartialCert, error)
	grpc.ClientStream
}

type hotstuffProposeClient struct {
	grpc.ClientStream
}

func (x *hotstuffProposeClient) Send(m *HSNode) error {
	return x.ClientStream.SendMsg(m)
}

func (x *hotstuffProposeClient) Recv() (*PartialCert, error) {
	m := new(PartialCert)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *hotstuffClient) NewView(ctx context.Context, in *QuorumCert, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/proto.Hotstuff/NewView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HotstuffServer is the server API for Hotstuff service.
type HotstuffServer interface {
	Propose(Hotstuff_ProposeServer) error
	NewView(context.Context, *QuorumCert) (*Empty, error)
}

// UnimplementedHotstuffServer can be embedded to have forward compatible implementations.
type UnimplementedHotstuffServer struct {
}

func (*UnimplementedHotstuffServer) Propose(Hotstuff_ProposeServer) error {
	return status.Errorf(codes.Unimplemented, "method Propose not implemented")
}
func (*UnimplementedHotstuffServer) NewView(context.Context, *QuorumCert) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewView not implemented")
}

func RegisterHotstuffServer(s *grpc.Server, srv HotstuffServer) {
	s.RegisterService(&_Hotstuff_serviceDesc, srv)
}

func _Hotstuff_Propose_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HotstuffServer).Propose(&hotstuffProposeServer{stream})
}

type Hotstuff_ProposeServer interface {
	Send(*PartialCert) error
	Recv() (*HSNode, error)
	grpc.ServerStream
}

type hotstuffProposeServer struct {
	grpc.ServerStream
}

func (x *hotstuffProposeServer) Send(m *PartialCert) error {
	return x.ServerStream.SendMsg(m)
}

func (x *hotstuffProposeServer) Recv() (*HSNode, error) {
	m := new(HSNode)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Hotstuff_NewView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuorumCert)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotstuffServer).NewView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Hotstuff/NewView",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotstuffServer).NewView(ctx, req.(*QuorumCert))
	}
	return interceptor(ctx, in, info, handler)
}

var _Hotstuff_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Hotstuff",
	HandlerType: (*HotstuffServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewView",
			Handler:    _Hotstuff_NewView_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Propose",
			Handler:       _Hotstuff_Propose_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "gorumshotstuff/internal/proto/hotstuff.proto",
}
