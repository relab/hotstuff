// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package orchestration

import (
	"crypto/tls"
	"crypto/x509"
	"github.com/relab/gorums"
	"github.com/relab/hotstuff"
	"github.com/relab/hotstuff/core"
	"github.com/relab/hotstuff/core/eventloop"
	"github.com/relab/hotstuff/core/logging"
	"github.com/relab/hotstuff/internal/proto/orchestrationpb"
	"github.com/relab/hotstuff/modules"
	"github.com/relab/hotstuff/network/netconfig"
	"github.com/relab/hotstuff/network/sender"
	"github.com/relab/hotstuff/protocol/consensus"
	"github.com/relab/hotstuff/protocol/synchronizer"
	"github.com/relab/hotstuff/security/blockchain"
	"github.com/relab/hotstuff/security/certauth"
	"github.com/relab/hotstuff/service/clientsrv"
	"github.com/relab/hotstuff/service/committer"
	"google.golang.org/grpc/credentials"
)

// Injectors from wire.go:

func Initialize(cryptoImpl modules.CryptoBase, consensusRules modules.ConsensusRules, leaderRotation modules.LeaderRotation, viewDuration modules.ViewDuration, id hotstuff.ID, privKey hotstuff.PrivateKey, bufferSize BufferSizeType, name string, creds credentials.TransportCredentials, cacheSize CacheSizeType, batchSize BatchSizeType, clientSrvOpts []gorums.ServerOption, opts *orchestrationpb.ReplicaOpts, certificate tls.Certificate, rootCAs *x509.CertPool) (*synchronizer.Synchronizer, error) {
	config := netconfig.NewConfig()
	logger := logging.New(name)
	eventLoop := newEventLoop(logger, bufferSize)
	options := core.NewOptions(id, privKey)
	senderSender := sender.New(config, eventLoop, logger, options, creds)
	blockChain := blockchain.New(senderSender, eventLoop, logger)
	cmdCache := newCmdCache(logger, batchSize)
	clientServer := clientsrv.NewClientServer(eventLoop, logger, cmdCache, clientSrvOpts)
	committerCommitter := committer.New(blockChain, clientServer, logger)
	certAuthority := newCertAuth(cryptoImpl, blockChain, logger, cacheSize)
	consensusConsensus := consensus.New(consensusRules, leaderRotation, blockChain, committerCommitter, cmdCache, senderSender, certAuthority, config, eventLoop, logger, options)
	synchronizerSynchronizer := synchronizer.New(cryptoImpl, leaderRotation, viewDuration, blockChain, consensusConsensus, certAuthority, config, senderSender, eventLoop, logger, options)
	return synchronizerSynchronizer, nil
}

// wire.go:

type CacheSizeType int

func NewCertAuth(
	cryptoImpl modules.CryptoBase,
	blockChain *blockchain.BlockChain,
	logger logging.Logger,
	cacheSize CacheSizeType) *certauth.CertAuthority {
	if cacheSize > 0 {
		return certauth.NewCached(
			cryptoImpl,
			blockChain,
			logger,
			int(cacheSize),
		)
	}

	return certauth.New(
		cryptoImpl,
		blockChain,
		logger,
	)
}

type BatchSizeType int

func NewCmdCache(logger logging.Logger, batchSize BatchSizeType) *clientsrv.CmdCache {
	return clientsrv.NewCmdCache(logger, int(batchSize))
}

type BufferSizeType uint

func NewEventLoop(logger logging.Logger, bufferSize BufferSizeType) *eventloop.EventLoop {
	return eventloop.New(logger, uint(bufferSize))
}
