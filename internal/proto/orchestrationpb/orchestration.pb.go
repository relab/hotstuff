// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.19.4
// source: internal/proto/orchestrationpb/orchestration.proto

package orchestrationpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ReplicaOpts contains the confiugration options for a replica.
type ReplicaOpts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The replica's ID.
	ID uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	// The replica's private key.
	PrivateKey []byte `protobuf:"bytes,3,opt,name=PrivateKey,proto3" json:"PrivateKey,omitempty"`
	// The replica's public key.
	PublicKey []byte `protobuf:"bytes,16,opt,name=PublicKey,proto3" json:"PublicKey,omitempty"`
	// Determines whether TLS should be used.
	UseTLS bool `protobuf:"varint,4,opt,name=UseTLS,proto3" json:"UseTLS,omitempty"`
	// The replica's TLS certificate.
	Certificate []byte `protobuf:"bytes,5,opt,name=Certificate,proto3" json:"Certificate,omitempty"`
	// The private key of the TLS certificate.
	CertificateKey []byte `protobuf:"bytes,6,opt,name=CertificateKey,proto3" json:"CertificateKey,omitempty"`
	// The certificate authority that created the TLS certificates.
	CertificateAuthority []byte `protobuf:"bytes,7,opt,name=CertificateAuthority,proto3" json:"CertificateAuthority,omitempty"`
	// The name of the crypto implementation to use.
	Crypto string `protobuf:"bytes,8,opt,name=Crypto,proto3" json:"Crypto,omitempty"`
	// The name of the consensus implementation to use.
	Consensus string `protobuf:"bytes,9,opt,name=Consensus,proto3" json:"Consensus,omitempty"`
	// The name of the leader rotation algorithm to use.
	LeaderRotation string `protobuf:"bytes,10,opt,name=LeaderRotation,proto3" json:"LeaderRotation,omitempty"`
	// The number of client commands that should be batched together.
	BatchSize uint32 `protobuf:"varint,11,opt,name=BatchSize,proto3" json:"BatchSize,omitempty"`
	// The timeout of the initial connection setup.
	ConnectTimeout *durationpb.Duration `protobuf:"bytes,17,opt,name=ConnectTimeout,proto3" json:"ConnectTimeout,omitempty"`
	// The initial view duration.
	InitialTimeout *durationpb.Duration `protobuf:"bytes,12,opt,name=InitialTimeout,proto3" json:"InitialTimeout,omitempty"`
	// The maximum view timeout.
	MaxTimeout *durationpb.Duration `protobuf:"bytes,19,opt,name=MaxTimeout,proto3" json:"MaxTimeout,omitempty"`
	// The number of samples used to calculate view duration.
	TimeoutSamples uint32 `protobuf:"varint,13,opt,name=TimeoutSamples,proto3" json:"TimeoutSamples,omitempty"`
	// The number that the old view duration should be multiplied by when a new
	// timeout happens.
	TimeoutMultiplier float32 `protobuf:"fixed32,14,opt,name=TimeoutMultiplier,proto3" json:"TimeoutMultiplier,omitempty"`
	// The byzantine strategy to use. If empty, the replica will act normally.
	ByzantineStrategy string `protobuf:"bytes,18,opt,name=ByzantineStrategy,proto3" json:"ByzantineStrategy,omitempty"`
	// A shared random number for seeding random number generators.
	SharedSeed int64 `protobuf:"varint,20,opt,name=SharedSeed,proto3" json:"SharedSeed,omitempty"`
	// A list of modules to load.
	Modules []string `protobuf:"bytes,21,rep,name=Modules,proto3" json:"Modules,omitempty"`
	// locations of the replicas
	LocationInfo map[uint32]string `protobuf:"bytes,22,rep,name=LocationInfo,proto3" json:"LocationInfo,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ReplicaOpts) Reset() {
	*x = ReplicaOpts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_proto_orchestrationpb_orchestration_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplicaOpts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicaOpts) ProtoMessage() {}

func (x *ReplicaOpts) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_orchestrationpb_orchestration_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicaOpts.ProtoReflect.Descriptor instead.
func (*ReplicaOpts) Descriptor() ([]byte, []int) {
	return file_internal_proto_orchestrationpb_orchestration_proto_rawDescGZIP(), []int{0}
}

func (x *ReplicaOpts) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ReplicaOpts) GetPrivateKey() []byte {
	if x != nil {
		return x.PrivateKey
	}
	return nil
}

func (x *ReplicaOpts) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *ReplicaOpts) GetUseTLS() bool {
	if x != nil {
		return x.UseTLS
	}
	return false
}

func (x *ReplicaOpts) GetCertificate() []byte {
	if x != nil {
		return x.Certificate
	}
	return nil
}

func (x *ReplicaOpts) GetCertificateKey() []byte {
	if x != nil {
		return x.CertificateKey
	}
	return nil
}

func (x *ReplicaOpts) GetCertificateAuthority() []byte {
	if x != nil {
		return x.CertificateAuthority
	}
	return nil
}

func (x *ReplicaOpts) GetCrypto() string {
	if x != nil {
		return x.Crypto
	}
	return ""
}

func (x *ReplicaOpts) GetConsensus() string {
	if x != nil {
		return x.Consensus
	}
	return ""
}

func (x *ReplicaOpts) GetLeaderRotation() string {
	if x != nil {
		return x.LeaderRotation
	}
	return ""
}

func (x *ReplicaOpts) GetBatchSize() uint32 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

func (x *ReplicaOpts) GetConnectTimeout() *durationpb.Duration {
	if x != nil {
		return x.ConnectTimeout
	}
	return nil
}

func (x *ReplicaOpts) GetInitialTimeout() *durationpb.Duration {
	if x != nil {
		return x.InitialTimeout
	}
	return nil
}

func (x *ReplicaOpts) GetMaxTimeout() *durationpb.Duration {
	if x != nil {
		return x.MaxTimeout
	}
	return nil
}

func (x *ReplicaOpts) GetTimeoutSamples() uint32 {
	if x != nil {
		return x.TimeoutSamples
	}
	return 0
}

func (x *ReplicaOpts) GetTimeoutMultiplier() float32 {
	if x != nil {
		return x.TimeoutMultiplier
	}
	return 0
}

func (x *ReplicaOpts) GetByzantineStrategy() string {
	if x != nil {
		return x.ByzantineStrategy
	}
	return ""
}

func (x *ReplicaOpts) GetSharedSeed() int64 {
	if x != nil {
		return x.SharedSeed
	}
	return 0
}

func (x *ReplicaOpts) GetModules() []string {
	if x != nil {
		return x.Modules
	}
	return nil
}

func (x *ReplicaOpts) GetLocationInfo() map[uint32]string {
	if x != nil {
		return x.LocationInfo
	}
	return nil
}

// ReplicaInfo is the information that the replicas need about each other.
type ReplicaInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the replica.
	ID uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	// The IP address of the replica.
	Address string `protobuf:"bytes,2,opt,name=Address,proto3" json:"Address,omitempty"`
	// The public key of the replica.
	PublicKey []byte `protobuf:"bytes,3,opt,name=PublicKey,proto3" json:"PublicKey,omitempty"`
	// The port that other replicas should connect to.
	ReplicaPort uint32 `protobuf:"varint,4,opt,name=ReplicaPort,proto3" json:"ReplicaPort,omitempty"`
	// The port that clients should connect to.
	ClientPort uint32 `protobuf:"varint,5,opt,name=ClientPort,proto3" json:"ClientPort,omitempty"`
}

func (x *ReplicaInfo) Reset() {
	*x = ReplicaInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_proto_orchestrationpb_orchestration_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplicaInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicaInfo) ProtoMessage() {}

func (x *ReplicaInfo) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_orchestrationpb_orchestration_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicaInfo.ProtoReflect.Descriptor instead.
func (*ReplicaInfo) Descriptor() ([]byte, []int) {
	return file_internal_proto_orchestrationpb_orchestration_proto_rawDescGZIP(), []int{1}
}

func (x *ReplicaInfo) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ReplicaInfo) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ReplicaInfo) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *ReplicaInfo) GetReplicaPort() uint32 {
	if x != nil {
		return x.ReplicaPort
	}
	return 0
}

func (x *ReplicaInfo) GetClientPort() uint32 {
	if x != nil {
		return x.ClientPort
	}
	return 0
}

type ClientOpts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The client's ID.
	ID uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	// Determines whether TLS should be used.
	UseTLS bool `protobuf:"varint,4,opt,name=UseTLS,proto3" json:"UseTLS,omitempty"`
	// The maximum number of concurrent requests.
	MaxConcurrent uint32 `protobuf:"varint,8,opt,name=MaxConcurrent,proto3" json:"MaxConcurrent,omitempty"`
	// The size in bytes of each command.
	PayloadSize uint32 `protobuf:"varint,9,opt,name=PayloadSize,proto3" json:"PayloadSize,omitempty"`
	// The timeout of the initial connection.
	ConnectTimeout *durationpb.Duration `protobuf:"bytes,10,opt,name=ConnectTimeout,proto3" json:"ConnectTimeout,omitempty"`
	// The limit on how many commands can be sent per second.
	RateLimit float64 `protobuf:"fixed64,11,opt,name=RateLimit,proto3" json:"RateLimit,omitempty"`
	// The amount of commands per second to increase the rate limit by.
	RateStep float64 `protobuf:"fixed64,12,opt,name=RateStep,proto3" json:"RateStep,omitempty"`
	// How often to increase the rate limit.
	RateStepInterval *durationpb.Duration `protobuf:"bytes,13,opt,name=RateStepInterval,proto3" json:"RateStepInterval,omitempty"`
	// The timeout for a command.
	Timeout *durationpb.Duration `protobuf:"bytes,14,opt,name=Timeout,proto3" json:"Timeout,omitempty"`
}

func (x *ClientOpts) Reset() {
	*x = ClientOpts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_proto_orchestrationpb_orchestration_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientOpts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientOpts) ProtoMessage() {}

func (x *ClientOpts) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_orchestrationpb_orchestration_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientOpts.ProtoReflect.Descriptor instead.
func (*ClientOpts) Descriptor() ([]byte, []int) {
	return file_internal_proto_orchestrationpb_orchestration_proto_rawDescGZIP(), []int{2}
}

func (x *ClientOpts) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ClientOpts) GetUseTLS() bool {
	if x != nil {
		return x.UseTLS
	}
	return false
}

func (x *ClientOpts) GetMaxConcurrent() uint32 {
	if x != nil {
		return x.MaxConcurrent
	}
	return 0
}

func (x *ClientOpts) GetPayloadSize() uint32 {
	if x != nil {
		return x.PayloadSize
	}
	return 0
}

func (x *ClientOpts) GetConnectTimeout() *durationpb.Duration {
	if x != nil {
		return x.ConnectTimeout
	}
	return nil
}

func (x *ClientOpts) GetRateLimit() float64 {
	if x != nil {
		return x.RateLimit
	}
	return 0
}

func (x *ClientOpts) GetRateStep() float64 {
	if x != nil {
		return x.RateStep
	}
	return 0
}

func (x *ClientOpts) GetRateStepInterval() *durationpb.Duration {
	if x != nil {
		return x.RateStepInterval
	}
	return nil
}

func (x *ClientOpts) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

type ReplicaConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Replicas map[uint32]*ReplicaInfo `protobuf:"bytes,1,rep,name=Replicas,proto3" json:"Replicas,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ReplicaConfiguration) Reset() {
	*x = ReplicaConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_proto_orchestrationpb_orchestration_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplicaConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicaConfiguration) ProtoMessage() {}

func (x *ReplicaConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_orchestrationpb_orchestration_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicaConfiguration.ProtoReflect.Descriptor instead.
func (*ReplicaConfiguration) Descriptor() ([]byte, []int) {
	return file_internal_proto_orchestrationpb_orchestration_proto_rawDescGZIP(), []int{3}
}

func (x *ReplicaConfiguration) GetReplicas() map[uint32]*ReplicaInfo {
	if x != nil {
		return x.Replicas
	}
	return nil
}

type CreateReplicaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Replicas map[uint32]*ReplicaOpts `protobuf:"bytes,1,rep,name=Replicas,proto3" json:"Replicas,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CreateReplicaRequest) Reset() {
	*x = CreateReplicaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_proto_orchestrationpb_orchestration_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateReplicaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReplicaRequest) ProtoMessage() {}

func (x *CreateReplicaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_orchestrationpb_orchestration_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReplicaRequest.ProtoReflect.Descriptor instead.
func (*CreateReplicaRequest) Descriptor() ([]byte, []int) {
	return file_internal_proto_orchestrationpb_orchestration_proto_rawDescGZIP(), []int{4}
}

func (x *CreateReplicaRequest) GetReplicas() map[uint32]*ReplicaOpts {
	if x != nil {
		return x.Replicas
	}
	return nil
}

type CreateReplicaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Replicas map[uint32]*ReplicaInfo `protobuf:"bytes,1,rep,name=Replicas,proto3" json:"Replicas,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CreateReplicaResponse) Reset() {
	*x = CreateReplicaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_proto_orchestrationpb_orchestration_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateReplicaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReplicaResponse) ProtoMessage() {}

func (x *CreateReplicaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_orchestrationpb_orchestration_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReplicaResponse.ProtoReflect.Descriptor instead.
func (*CreateReplicaResponse) Descriptor() ([]byte, []int) {
	return file_internal_proto_orchestrationpb_orchestration_proto_rawDescGZIP(), []int{5}
}

func (x *CreateReplicaResponse) GetReplicas() map[uint32]*ReplicaInfo {
	if x != nil {
		return x.Replicas
	}
	return nil
}

type StartReplicaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The replica IDs that should be started.
	IDs []uint32 `protobuf:"varint,1,rep,packed,name=IDs,proto3" json:"IDs,omitempty"`
	// The configuration of replicas to connect to.
	Configuration map[uint32]*ReplicaInfo `protobuf:"bytes,2,rep,name=Configuration,proto3" json:"Configuration,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *StartReplicaRequest) Reset() {
	*x = StartReplicaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_proto_orchestrationpb_orchestration_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartReplicaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartReplicaRequest) ProtoMessage() {}

func (x *StartReplicaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_orchestrationpb_orchestration_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartReplicaRequest.ProtoReflect.Descriptor instead.
func (*StartReplicaRequest) Descriptor() ([]byte, []int) {
	return file_internal_proto_orchestrationpb_orchestration_proto_rawDescGZIP(), []int{6}
}

func (x *StartReplicaRequest) GetIDs() []uint32 {
	if x != nil {
		return x.IDs
	}
	return nil
}

func (x *StartReplicaRequest) GetConfiguration() map[uint32]*ReplicaInfo {
	if x != nil {
		return x.Configuration
	}
	return nil
}

type StartReplicaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StartReplicaResponse) Reset() {
	*x = StartReplicaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_proto_orchestrationpb_orchestration_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartReplicaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartReplicaResponse) ProtoMessage() {}

func (x *StartReplicaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_orchestrationpb_orchestration_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartReplicaResponse.ProtoReflect.Descriptor instead.
func (*StartReplicaResponse) Descriptor() ([]byte, []int) {
	return file_internal_proto_orchestrationpb_orchestration_proto_rawDescGZIP(), []int{7}
}

type StopReplicaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IDs []uint32 `protobuf:"varint,1,rep,packed,name=IDs,proto3" json:"IDs,omitempty"`
}

func (x *StopReplicaRequest) Reset() {
	*x = StopReplicaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_proto_orchestrationpb_orchestration_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopReplicaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopReplicaRequest) ProtoMessage() {}

func (x *StopReplicaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_orchestrationpb_orchestration_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopReplicaRequest.ProtoReflect.Descriptor instead.
func (*StopReplicaRequest) Descriptor() ([]byte, []int) {
	return file_internal_proto_orchestrationpb_orchestration_proto_rawDescGZIP(), []int{8}
}

func (x *StopReplicaRequest) GetIDs() []uint32 {
	if x != nil {
		return x.IDs
	}
	return nil
}

type StopReplicaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The final state hash of all executed commands
	Hashes map[uint32][]byte `protobuf:"bytes,1,rep,name=Hashes,proto3" json:"Hashes,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The final count of executed commands
	Counts map[uint32]uint32 `protobuf:"bytes,2,rep,name=Counts,proto3" json:"Counts,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *StopReplicaResponse) Reset() {
	*x = StopReplicaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_proto_orchestrationpb_orchestration_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopReplicaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopReplicaResponse) ProtoMessage() {}

func (x *StopReplicaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_orchestrationpb_orchestration_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopReplicaResponse.ProtoReflect.Descriptor instead.
func (*StopReplicaResponse) Descriptor() ([]byte, []int) {
	return file_internal_proto_orchestrationpb_orchestration_proto_rawDescGZIP(), []int{9}
}

func (x *StopReplicaResponse) GetHashes() map[uint32][]byte {
	if x != nil {
		return x.Hashes
	}
	return nil
}

func (x *StopReplicaResponse) GetCounts() map[uint32]uint32 {
	if x != nil {
		return x.Counts
	}
	return nil
}

type StartClientRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The clients to create.
	Clients map[uint32]*ClientOpts `protobuf:"bytes,1,rep,name=Clients,proto3" json:"Clients,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The certificate authority that created the TLS certificates.
	CertificateAuthority []byte `protobuf:"bytes,7,opt,name=CertificateAuthority,proto3" json:"CertificateAuthority,omitempty"`
	// The replicas to connect to.
	Configuration map[uint32]*ReplicaInfo `protobuf:"bytes,10,rep,name=Configuration,proto3" json:"Configuration,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *StartClientRequest) Reset() {
	*x = StartClientRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_proto_orchestrationpb_orchestration_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartClientRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartClientRequest) ProtoMessage() {}

func (x *StartClientRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_orchestrationpb_orchestration_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartClientRequest.ProtoReflect.Descriptor instead.
func (*StartClientRequest) Descriptor() ([]byte, []int) {
	return file_internal_proto_orchestrationpb_orchestration_proto_rawDescGZIP(), []int{10}
}

func (x *StartClientRequest) GetClients() map[uint32]*ClientOpts {
	if x != nil {
		return x.Clients
	}
	return nil
}

func (x *StartClientRequest) GetCertificateAuthority() []byte {
	if x != nil {
		return x.CertificateAuthority
	}
	return nil
}

func (x *StartClientRequest) GetConfiguration() map[uint32]*ReplicaInfo {
	if x != nil {
		return x.Configuration
	}
	return nil
}

type StartClientResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StartClientResponse) Reset() {
	*x = StartClientResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_proto_orchestrationpb_orchestration_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartClientResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartClientResponse) ProtoMessage() {}

func (x *StartClientResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_orchestrationpb_orchestration_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartClientResponse.ProtoReflect.Descriptor instead.
func (*StartClientResponse) Descriptor() ([]byte, []int) {
	return file_internal_proto_orchestrationpb_orchestration_proto_rawDescGZIP(), []int{11}
}

type StopClientRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IDs []uint32 `protobuf:"varint,1,rep,packed,name=IDs,proto3" json:"IDs,omitempty"`
}

func (x *StopClientRequest) Reset() {
	*x = StopClientRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_proto_orchestrationpb_orchestration_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopClientRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopClientRequest) ProtoMessage() {}

func (x *StopClientRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_orchestrationpb_orchestration_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopClientRequest.ProtoReflect.Descriptor instead.
func (*StopClientRequest) Descriptor() ([]byte, []int) {
	return file_internal_proto_orchestrationpb_orchestration_proto_rawDescGZIP(), []int{12}
}

func (x *StopClientRequest) GetIDs() []uint32 {
	if x != nil {
		return x.IDs
	}
	return nil
}

type StopClientResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StopClientResponse) Reset() {
	*x = StopClientResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_proto_orchestrationpb_orchestration_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopClientResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopClientResponse) ProtoMessage() {}

func (x *StopClientResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_orchestrationpb_orchestration_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopClientResponse.ProtoReflect.Descriptor instead.
func (*StopClientResponse) Descriptor() ([]byte, []int) {
	return file_internal_proto_orchestrationpb_orchestration_proto_rawDescGZIP(), []int{13}
}

type QuitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *QuitRequest) Reset() {
	*x = QuitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_proto_orchestrationpb_orchestration_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuitRequest) ProtoMessage() {}

func (x *QuitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_orchestrationpb_orchestration_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuitRequest.ProtoReflect.Descriptor instead.
func (*QuitRequest) Descriptor() ([]byte, []int) {
	return file_internal_proto_orchestrationpb_orchestration_proto_rawDescGZIP(), []int{14}
}

var File_internal_proto_orchestrationpb_orchestration_proto protoreflect.FileDescriptor

var file_internal_proto_orchestrationpb_orchestration_proto_rawDesc = []byte{
	0x0a, 0x32, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62,
	0x2f, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x70, 0x62, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x81, 0x07, 0x0a, 0x0b, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x4f, 0x70, 0x74, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x54, 0x4c, 0x53, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x55, 0x73, 0x65, 0x54, 0x4c, 0x53, 0x12, 0x20, 0x0a, 0x0b, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0b, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x14, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x14, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x43, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x12,
	0x26, 0x0a, 0x0e, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x53, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x41, 0x0a, 0x0e, 0x49, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x49, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x4d,
	0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x4d, 0x61, 0x78, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x2c,
	0x0a, 0x11, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	0x69, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11,
	0x42, 0x79, 0x7a, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x42, 0x79, 0x7a, 0x61, 0x6e, 0x74, 0x69,
	0x6e, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x53, 0x65, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x53, 0x65, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x73, 0x12, 0x52, 0x0a, 0x0c, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6f, 0x72, 0x63,
	0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x4f, 0x70, 0x74, 0x73, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x3f, 0x0a, 0x11, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x97, 0x01, 0x0a, 0x0b, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x50, 0x6f, 0x72, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x50,
	0x6f, 0x72, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x72,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50,
	0x6f, 0x72, 0x74, 0x22, 0xf5, 0x02, 0x0a, 0x0a, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x70,
	0x74, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02,
	0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x54, 0x4c, 0x53, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x55, 0x73, 0x65, 0x54, 0x4c, 0x53, 0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x61,
	0x78, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x61, 0x74, 0x65, 0x53, 0x74, 0x65, 0x70, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x52, 0x61, 0x74, 0x65, 0x53, 0x74, 0x65, 0x70, 0x12,
	0x45, 0x0a, 0x10, 0x52, 0x61, 0x74, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x52, 0x61, 0x74, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x33, 0x0a, 0x07, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x07, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0xc2, 0x01, 0x0a, 0x14,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x73, 0x1a, 0x59, 0x0a, 0x0d, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xc2, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x08, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6f, 0x72,
	0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x1a, 0x59, 0x0a, 0x0d, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f,
	0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x4f, 0x70, 0x74, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc4, 0x01, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x50, 0x0a, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x73, 0x1a, 0x59, 0x0a, 0x0d, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe6, 0x01, 0x0a,
	0x13, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x03, 0x49, 0x44, 0x73, 0x12, 0x5d, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2e,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x5e, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f,
	0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x16, 0x0a, 0x14, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x0a,
	0x12, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x03, 0x49, 0x44, 0x73, 0x22, 0x9f, 0x02, 0x0a, 0x13, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a,
	0x06, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2e,
	0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x06, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x06, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xab, 0x03, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a,
	0x0a, 0x07, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70,
	0x62, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x07, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x14, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x5c,
	0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x57, 0x0a, 0x0c,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2e,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5e, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f,
	0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x15, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x0a, 0x11,
	0x53, 0x74, 0x6f, 0x70, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x03,
	0x49, 0x44, 0x73, 0x22, 0x14, 0x0a, 0x12, 0x53, 0x74, 0x6f, 0x70, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x0d, 0x0a, 0x0b, 0x51, 0x75, 0x69,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x3a, 0x5a, 0x38, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x62, 0x2f, 0x68, 0x6f, 0x74,
	0x73, 0x74, 0x75, 0x66, 0x66, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_internal_proto_orchestrationpb_orchestration_proto_rawDescOnce sync.Once
	file_internal_proto_orchestrationpb_orchestration_proto_rawDescData = file_internal_proto_orchestrationpb_orchestration_proto_rawDesc
)

func file_internal_proto_orchestrationpb_orchestration_proto_rawDescGZIP() []byte {
	file_internal_proto_orchestrationpb_orchestration_proto_rawDescOnce.Do(func() {
		file_internal_proto_orchestrationpb_orchestration_proto_rawDescData = protoimpl.X.CompressGZIP(file_internal_proto_orchestrationpb_orchestration_proto_rawDescData)
	})
	return file_internal_proto_orchestrationpb_orchestration_proto_rawDescData
}

var file_internal_proto_orchestrationpb_orchestration_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_internal_proto_orchestrationpb_orchestration_proto_goTypes = []interface{}{
	(*ReplicaOpts)(nil),           // 0: orchestrationpb.ReplicaOpts
	(*ReplicaInfo)(nil),           // 1: orchestrationpb.ReplicaInfo
	(*ClientOpts)(nil),            // 2: orchestrationpb.ClientOpts
	(*ReplicaConfiguration)(nil),  // 3: orchestrationpb.ReplicaConfiguration
	(*CreateReplicaRequest)(nil),  // 4: orchestrationpb.CreateReplicaRequest
	(*CreateReplicaResponse)(nil), // 5: orchestrationpb.CreateReplicaResponse
	(*StartReplicaRequest)(nil),   // 6: orchestrationpb.StartReplicaRequest
	(*StartReplicaResponse)(nil),  // 7: orchestrationpb.StartReplicaResponse
	(*StopReplicaRequest)(nil),    // 8: orchestrationpb.StopReplicaRequest
	(*StopReplicaResponse)(nil),   // 9: orchestrationpb.StopReplicaResponse
	(*StartClientRequest)(nil),    // 10: orchestrationpb.StartClientRequest
	(*StartClientResponse)(nil),   // 11: orchestrationpb.StartClientResponse
	(*StopClientRequest)(nil),     // 12: orchestrationpb.StopClientRequest
	(*StopClientResponse)(nil),    // 13: orchestrationpb.StopClientResponse
	(*QuitRequest)(nil),           // 14: orchestrationpb.QuitRequest
	nil,                           // 15: orchestrationpb.ReplicaOpts.LocationInfoEntry
	nil,                           // 16: orchestrationpb.ReplicaConfiguration.ReplicasEntry
	nil,                           // 17: orchestrationpb.CreateReplicaRequest.ReplicasEntry
	nil,                           // 18: orchestrationpb.CreateReplicaResponse.ReplicasEntry
	nil,                           // 19: orchestrationpb.StartReplicaRequest.ConfigurationEntry
	nil,                           // 20: orchestrationpb.StopReplicaResponse.HashesEntry
	nil,                           // 21: orchestrationpb.StopReplicaResponse.CountsEntry
	nil,                           // 22: orchestrationpb.StartClientRequest.ClientsEntry
	nil,                           // 23: orchestrationpb.StartClientRequest.ConfigurationEntry
	(*durationpb.Duration)(nil),   // 24: google.protobuf.Duration
}
var file_internal_proto_orchestrationpb_orchestration_proto_depIdxs = []int32{
	24, // 0: orchestrationpb.ReplicaOpts.ConnectTimeout:type_name -> google.protobuf.Duration
	24, // 1: orchestrationpb.ReplicaOpts.InitialTimeout:type_name -> google.protobuf.Duration
	24, // 2: orchestrationpb.ReplicaOpts.MaxTimeout:type_name -> google.protobuf.Duration
	15, // 3: orchestrationpb.ReplicaOpts.LocationInfo:type_name -> orchestrationpb.ReplicaOpts.LocationInfoEntry
	24, // 4: orchestrationpb.ClientOpts.ConnectTimeout:type_name -> google.protobuf.Duration
	24, // 5: orchestrationpb.ClientOpts.RateStepInterval:type_name -> google.protobuf.Duration
	24, // 6: orchestrationpb.ClientOpts.Timeout:type_name -> google.protobuf.Duration
	16, // 7: orchestrationpb.ReplicaConfiguration.Replicas:type_name -> orchestrationpb.ReplicaConfiguration.ReplicasEntry
	17, // 8: orchestrationpb.CreateReplicaRequest.Replicas:type_name -> orchestrationpb.CreateReplicaRequest.ReplicasEntry
	18, // 9: orchestrationpb.CreateReplicaResponse.Replicas:type_name -> orchestrationpb.CreateReplicaResponse.ReplicasEntry
	19, // 10: orchestrationpb.StartReplicaRequest.Configuration:type_name -> orchestrationpb.StartReplicaRequest.ConfigurationEntry
	20, // 11: orchestrationpb.StopReplicaResponse.Hashes:type_name -> orchestrationpb.StopReplicaResponse.HashesEntry
	21, // 12: orchestrationpb.StopReplicaResponse.Counts:type_name -> orchestrationpb.StopReplicaResponse.CountsEntry
	22, // 13: orchestrationpb.StartClientRequest.Clients:type_name -> orchestrationpb.StartClientRequest.ClientsEntry
	23, // 14: orchestrationpb.StartClientRequest.Configuration:type_name -> orchestrationpb.StartClientRequest.ConfigurationEntry
	1,  // 15: orchestrationpb.ReplicaConfiguration.ReplicasEntry.value:type_name -> orchestrationpb.ReplicaInfo
	0,  // 16: orchestrationpb.CreateReplicaRequest.ReplicasEntry.value:type_name -> orchestrationpb.ReplicaOpts
	1,  // 17: orchestrationpb.CreateReplicaResponse.ReplicasEntry.value:type_name -> orchestrationpb.ReplicaInfo
	1,  // 18: orchestrationpb.StartReplicaRequest.ConfigurationEntry.value:type_name -> orchestrationpb.ReplicaInfo
	2,  // 19: orchestrationpb.StartClientRequest.ClientsEntry.value:type_name -> orchestrationpb.ClientOpts
	1,  // 20: orchestrationpb.StartClientRequest.ConfigurationEntry.value:type_name -> orchestrationpb.ReplicaInfo
	21, // [21:21] is the sub-list for method output_type
	21, // [21:21] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_internal_proto_orchestrationpb_orchestration_proto_init() }
func file_internal_proto_orchestrationpb_orchestration_proto_init() {
	if File_internal_proto_orchestrationpb_orchestration_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_internal_proto_orchestrationpb_orchestration_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplicaOpts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_proto_orchestrationpb_orchestration_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplicaInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_proto_orchestrationpb_orchestration_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientOpts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_proto_orchestrationpb_orchestration_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplicaConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_proto_orchestrationpb_orchestration_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateReplicaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_proto_orchestrationpb_orchestration_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateReplicaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_proto_orchestrationpb_orchestration_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartReplicaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_proto_orchestrationpb_orchestration_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartReplicaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_proto_orchestrationpb_orchestration_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopReplicaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_proto_orchestrationpb_orchestration_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopReplicaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_proto_orchestrationpb_orchestration_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartClientRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_proto_orchestrationpb_orchestration_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartClientResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_proto_orchestrationpb_orchestration_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopClientRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_proto_orchestrationpb_orchestration_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopClientResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_proto_orchestrationpb_orchestration_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_internal_proto_orchestrationpb_orchestration_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_internal_proto_orchestrationpb_orchestration_proto_goTypes,
		DependencyIndexes: file_internal_proto_orchestrationpb_orchestration_proto_depIdxs,
		MessageInfos:      file_internal_proto_orchestrationpb_orchestration_proto_msgTypes,
	}.Build()
	File_internal_proto_orchestrationpb_orchestration_proto = out.File
	file_internal_proto_orchestrationpb_orchestration_proto_rawDesc = nil
	file_internal_proto_orchestrationpb_orchestration_proto_goTypes = nil
	file_internal_proto_orchestrationpb_orchestration_proto_depIdxs = nil
}
