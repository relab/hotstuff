// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/relab/hotstuff/core (interfaces: Configuration)
//
// Generated by this command:
//
//	mockgen -destination=../internal/mocks/configuration_mock.go -package=mocks . Configuration
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	hotstuff "github.com/relab/hotstuff"
	core "github.com/relab/hotstuff/components"
	gomock "go.uber.org/mock/gomock"
)

// MockConfiguration is a mock of Configuration interface.
type MockConfiguration struct {
	ctrl     *gomock.Controller
	recorder *MockConfigurationMockRecorder
	isgomock struct{}
}

// MockConfigurationMockRecorder is the mock recorder for MockConfiguration.
type MockConfigurationMockRecorder struct {
	mock *MockConfiguration
}

// NewMockConfiguration creates a new mock instance.
func NewMockConfiguration(ctrl *gomock.Controller) *MockConfiguration {
	mock := &MockConfiguration{ctrl: ctrl}
	mock.recorder = &MockConfigurationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfiguration) EXPECT() *MockConfigurationMockRecorder {
	return m.recorder
}

// Fetch mocks base method.
func (m *MockConfiguration) Fetch(ctx context.Context, hash hotstuff.Hash) (*hotstuff.Block, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", ctx, hash)
	ret0, _ := ret[0].(*hotstuff.Block)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch.
func (mr *MockConfigurationMockRecorder) Fetch(ctx, hash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockConfiguration)(nil).Fetch), ctx, hash)
}

// GetSubConfig mocks base method.
func (m *MockConfiguration) GetSubConfig(ids []hotstuff.ID) (core.Configuration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubConfig", ids)
	ret0, _ := ret[0].(core.Configuration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubConfig indicates an expected call of GetSubConfig.
func (mr *MockConfigurationMockRecorder) GetSubConfig(ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubConfig", reflect.TypeOf((*MockConfiguration)(nil).GetSubConfig), ids)
}

// Len mocks base method.
func (m *MockConfiguration) Len() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Len")
	ret0, _ := ret[0].(int)
	return ret0
}

// Len indicates an expected call of Len.
func (mr *MockConfigurationMockRecorder) Len() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Len", reflect.TypeOf((*MockConfiguration)(nil).Len))
}

// Propose mocks base method.
func (m *MockConfiguration) Propose(proposal hotstuff.ProposeMsg) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Propose", proposal)
}

// Propose indicates an expected call of Propose.
func (mr *MockConfigurationMockRecorder) Propose(proposal any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Propose", reflect.TypeOf((*MockConfiguration)(nil).Propose), proposal)
}

// QuorumSize mocks base method.
func (m *MockConfiguration) QuorumSize() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuorumSize")
	ret0, _ := ret[0].(int)
	return ret0
}

// QuorumSize indicates an expected call of QuorumSize.
func (mr *MockConfigurationMockRecorder) QuorumSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuorumSize", reflect.TypeOf((*MockConfiguration)(nil).QuorumSize))
}

// Replica mocks base method.
func (m *MockConfiguration) Replica(arg0 hotstuff.ID) (core.Replica, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Replica", arg0)
	ret0, _ := ret[0].(core.Replica)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Replica indicates an expected call of Replica.
func (mr *MockConfigurationMockRecorder) Replica(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Replica", reflect.TypeOf((*MockConfiguration)(nil).Replica), arg0)
}

// Replicas mocks base method.
func (m *MockConfiguration) Replicas() map[hotstuff.ID]core.Replica {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Replicas")
	ret0, _ := ret[0].(map[hotstuff.ID]core.Replica)
	return ret0
}

// Replicas indicates an expected call of Replicas.
func (mr *MockConfigurationMockRecorder) Replicas() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Replicas", reflect.TypeOf((*MockConfiguration)(nil).Replicas))
}

// Timeout mocks base method.
func (m *MockConfiguration) Timeout(msg hotstuff.TimeoutMsg) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Timeout", msg)
}

// Timeout indicates an expected call of Timeout.
func (mr *MockConfigurationMockRecorder) Timeout(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Timeout", reflect.TypeOf((*MockConfiguration)(nil).Timeout), msg)
}
