// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/relab/hotstuff/core (interfaces: ForkHandler)
//
// Generated by this command:
//
//	mockgen -destination=../internal/mocks/forkhandler_mock.go -package=mocks . ForkHandler
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	hotstuff "github.com/relab/hotstuff"
	gomock "go.uber.org/mock/gomock"
)

// MockForkHandler is a mock of ForkHandler interface.
type MockForkHandler struct {
	ctrl     *gomock.Controller
	recorder *MockForkHandlerMockRecorder
	isgomock struct{}
}

// MockForkHandlerMockRecorder is the mock recorder for MockForkHandler.
type MockForkHandlerMockRecorder struct {
	mock *MockForkHandler
}

// NewMockForkHandler creates a new mock instance.
func NewMockForkHandler(ctrl *gomock.Controller) *MockForkHandler {
	mock := &MockForkHandler{ctrl: ctrl}
	mock.recorder = &MockForkHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockForkHandler) EXPECT() *MockForkHandlerMockRecorder {
	return m.recorder
}

// Fork mocks base method.
func (m *MockForkHandler) Fork(cmd hotstuff.Command) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Fork", cmd)
}

// Fork indicates an expected call of Fork.
func (mr *MockForkHandlerMockRecorder) Fork(cmd any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fork", reflect.TypeOf((*MockForkHandler)(nil).Fork), cmd)
}
