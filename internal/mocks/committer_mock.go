// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/relab/hotstuff/core (interfaces: Committer)
//
// Generated by this command:
//
//	mockgen -destination=../internal/mocks/committer_mock.go -package=mocks . Committer
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	hotstuff "github.com/relab/hotstuff"
	gomock "go.uber.org/mock/gomock"
)

// MockCommitter is a mock of Committer interface.
type MockCommitter struct {
	ctrl     *gomock.Controller
	recorder *MockCommitterMockRecorder
	isgomock struct{}
}

// MockCommitterMockRecorder is the mock recorder for MockCommitter.
type MockCommitterMockRecorder struct {
	mock *MockCommitter
}

// NewMockCommitter creates a new mock instance.
func NewMockCommitter(ctrl *gomock.Controller) *MockCommitter {
	mock := &MockCommitter{ctrl: ctrl}
	mock.recorder = &MockCommitterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommitter) EXPECT() *MockCommitterMockRecorder {
	return m.recorder
}

// Commit mocks base method.
func (m *MockCommitter) Commit(committedHeight hotstuff.View, block *hotstuff.Block) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Commit", committedHeight, block)
}

// Commit indicates an expected call of Commit.
func (mr *MockCommitterMockRecorder) Commit(committedHeight, block any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockCommitter)(nil).Commit), committedHeight, block)
}

// CommittedBlock mocks base method.
func (m *MockCommitter) CommittedBlock() *hotstuff.Block {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommittedBlock")
	ret0, _ := ret[0].(*hotstuff.Block)
	return ret0
}

// CommittedBlock indicates an expected call of CommittedBlock.
func (mr *MockCommitterMockRecorder) CommittedBlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommittedBlock", reflect.TypeOf((*MockCommitter)(nil).CommittedBlock))
}
